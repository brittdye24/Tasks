edgelabels(text=Labs, cex=0.25)
?plot.phylo
tree1 <- (AnolisTree)
tree1
plot(tree1)
tree$tip.label
plot(tree1, type="fan")
plot(tree1, type="fan", col='red')
plot(tree1, type="fan", tip.col='red')
tree2 <- droptip()
tree2 <- drop.tip()
plot(tree1, tip.label = FALSE)
tree$tip.label
plot(tree1, type="fan")
plot(tree1, type="fan", tip.col='red')
tree1
tree1 <- (AnolisTree)
tree1
plot(tree1, tip.label = FALSE)
tree1 <- (AnolisTree, tip.label = FALSE)
tree1 <- (AnolisTree)
tree1
plot(tree1)
plot(tree1, type = "phylogram", tiplabels = FALSE)
tiplabels = FALSE
plot(tree1, show.tip.label = FALSE)
plot(tree1, type="fan")
plot(tree1, type="fan", tip.col='red')
plot(tree1, type="fan", tip.col='red')
which(shortest edge)
?which()
which(edge)
which(short edge = TRUE)
?which()
tree2 <- drop.tip(AnolisTree, 'Anolis_occultus')
plot(tree2)
plot(tree2, cex = 0.25)
ltt(AnolisTree)
abline(0, 1, lwd=2, col='red', lty=2)
fit.bd()
?fit.bd()
fit.bd(tree, b=NULL, d=NULL, rho=0.2)
fit.bd(tree2, b=NULL, d=NULL, rho=0.2)
ance the goldfish.
#Question 2: No
#Question 3: plot(tree1, show.tip.label = FALSE)
#Question 4: plot(tree1, type = "fan")
#Question 5: plot(tree1, type = "fan", tip.col='red')
#Question 6: Anolis occultus has shortest edge.
#Question 7: tree2 <- drop.tip(AnolisTree, 'Anolis_occultus)
#Question 8: plot(tree2, cex = 0.25)
#Question 9: The red line has a slope of 1 so it is not changing. The black line has a different pattern. The red one does not go down
#because of the slope.
#Question 10: fit.bd(tree2, b=NULL, d=NULL, rho=0.2)
library(phytools)
text.string <-
"(((((((cow, pig),whale),(bat,(lemur,human))),(robin,iguana)),coelacanth
),(gold_fish, trout)),shark);"
vert.tree <- read.tree(text=text.string)
plot(tree, type="fan")
tree
data <- read.csv("https://jonsmitchell.com/data/svl.csv", stringsAsFactors=F
, row.names=1)
data
svl <- setNames(data$svl, rownames(data))
svl
Ancestors <- fastAnc(tree, svl, vars=TRUE, CI=TRUE)
Ancestors <- fastAnc(tree , svl , vars=TRUE, CI=TRUE)
Ancestors
library(phytools)
library(ape)
library(maps)
?list
pairlist(trees)
vector("trees")
vector("list", NULL)
vector("list", empty)
vector(mode="list", length=NULL)
vector(mode="list", length="NULL")
vector(mode="list")
births <- c()
Fractions <- c()
?for
?forloop
??for
for(i in 1:100)
for
for(i in 1:100)
??for-loop
??for
??loop
for(i in 1:100) {
print(i)
}
random <- rnorm(N)
random <- rnorm(i)
random
random <- runif(N, min=1, max=100)
random <- runif(i, min=1, max=100)
random
random <- runif(1, min=1, max=100)
random
births
births(i=86.74786)
births
births
[i] 86.747786
births <- random ; i
births
births[i] <- random ; i
i
random
births[i] <- 86.74789 ; i
births <- 86.74789 ; i''
i
for(x in 1:100) {
print(x)
}
for(x in 1:100) {
print(x)
}
random <- rnorm(x)
random
random <- runif(1, min=1, max=100)
random
births[x] <- 18.7854 ; i
births[x]
random <- rnorm(x)
random <- runif(1, min=1, max=100)
random
Fractions[x] <- 99.68602 ; i
Fractions[x]
Fractions[i] <- 99.68602 ; x
Fractions[x]
births[i] <- 18.7854 ; x
births[x]
random <- rnorm(x)
random <- rnorm(x)
random <- runif(1, min=1, max=100)
random <- runif(1, min=1, max=100)
random
Fractions[i] <- 99.68602 ; x
Fractions[x]
pbtree
?pbtree
pbtree(b=births[x], d=births[x]*Fractions[x], number of tips=100)
pbtree(b=births[x], d=births[x]*Fractions[x])
pbtree(b=18.7854, d=1872.64176, n=100)
pbtree(b=18.7854, d=1872.64176, n=100, scale=1)
break
open
vector(mode="list")
births <- c()
Fractions <- c()
for(x in 1:100) {
print(x)
}
random <- rnorm(x)
random <- rnorm(x)
random <- runif(1, min=1, max=100)
random
births[x] <- 18.7854 ; x
births[x]
births[x] <- 29.10167 ; x
births[x]
random <- rnorm(x)
random <- runif(1, min=1, max=100)
random
Fractions[x] <- 51.76832 ; x
Fractions[x]
pbtree
pbtree(b=18.7854, d=1872.64176, n=100, scale=1)
break
openfor(x in 1:100) {
print(x)
}
for(x in 1:100) {
print(x)
}
close
library(ape)
library(phytools)
library(phytools)
library(ape)
library(maps)
trees <- vector("list")
class(trees)
trees
trees <- list()
class(trees)
length(trees)
births <- c()
Fractions <- c()
births
Fractions
births <- vector()
Fractions <- vector()
births
Fractions
for(x in 1:100) {
print(x)
}
ranodm <- runif(1, min=1, max=100)
random
random <- runif(1, min=1, max=100)
random
random01 <- runif(1, min=1, max=100)
random01
births[[x]] <- random
births[[x]]
Fractions[[x]] <- random01
Fractions[[x]]
?pbtree
random * random01
extinction <- random * random01
extinction
tree <- -pbtree(b="random", d="extinction", n=100)
tree <- pbtree(b="random", d="extinction", n=100)
tree <- pbtree(b='random', d='extinction', n=100)
tree <- pbtree(b=random, d=extinction, n=100)
tree
break
plot(births)
plot(Fractions)
plot(trees)
plot(pbtree)
?break
for(x in 1:100) {
print(paste("coming out from loop where x = ", x))
break
}
plot(births)
plot(Fractions)
plot(trees)
plot(pbtree)
library(phytools)
library(ape)
library(maps)
trees <- list()
class(trees)
class(trees)
length(trees)
births <- vector()
Fractions <- vector()
births
Fractions
for(x in 1:100) {
print(x)
}
random
random01
births[[x]] <- random
births[[x]]
Fractions[[x]]
extinction
tree <- pbtree(b=random, d=extinction, n=100)
tree
for(x in 1:100) {
print(paste("coming out from loop where x = ", x))
break
}
plot(births)
plot(Fractions)
plot(trees)
plot(pbtree)
?break
n=100
for(x in 1:n) {
print(x)
}
random
random <- runif(min=1, max=100)
random
plot(tree)
bd.ms(phy=geo$phy, missing=1, epsilon=0.9)
library(geiger)
bd.ms(phy=geo$phy, missing=1, epsilon=0.9)
install.package("geiger")
install.packages("geiger")
install.packages("geiger")
library("geiger")
bd.ms(phy=geo$phy, missing=1, epsilon=0.9)
tree[[x]] <- tree
tree[[x]]
plot(tree[[x]])
tree<-pbtree(n=400,scale=1)
plot(tree)
tree <- pbtree(b=random, d=extinction, n=100)
tree
tree[[x]] <- tree
tree[[x]]
tree <- pbtree(b=random, d=extinction, n=100, scale=1)
tree
tree[[x]] <- tree
tree[[x]]
plot(tree[[x]])
plot(tree)
tree01 <- pbtree(b=37.83098, d=90.47676, n=100, scale=1)
plot(tree01)
tree02 <- pbtree(n=100, scale=1)
plot(tree02)
tree02 <- pbtree(n=100, scale=2)
plot(tree02)
tree02 <- pbtree(n=100, scale=0.5)
plot(tree02)
tree02 <- pbtree(n=100, scale=5)
plot(tree02)
tree02 <- pbtree(n=100)
plot(tree02)
tree <- pbtree(b=random, d=extinction, n=100)
tree
tree[[x]] <- tree
tree[[x]]
plot(tree[[x]])
tt <- log(50)-log(2)
treee <- pbtree(n=50, t=tt)
plot(treee)
library(phytools)
library(ape)
library(map)
library(maps)
trees <- list()
births <- vector()
Fractions <- vector()
for(i in 1:n) {
print(i)
}
n=100
random <- runif(1, min=1, max=100)
random
trees[[i]] <- random(births)
trees[[i]] <- random(...)births
trees[[i]] <- 65.57132("births")
trees[[i]] <- births
trees[[i]]
random
births[[i]] <- random
births[[i]]
random1 <- runif(1, min=1, max=100)
random1
Fractions[[i]] <- random1
Fractions[[i]]
trees[[i]] <- pbtree(b=random, d=random1, n=100)
trees[[i]]
plot(trees[[i]])
for(x in 1:100) {
print(paste("coming out from loop where x = ", x))
break
}
plot(births)
bd.ms(phy=trees, missing=1, epsilon=0.9)
bd.ms(phy=trees$phy, missing=1, epsilon=0.9)
bd.ms(phy=trees$phy, time=100, missing=1, epsilon=0.9)
bd.ms(phy=trees$phy, time=100, n=NULL, missing=1, epsilon=0.9)
plot(bd.ms(phy=trees$phy, time=100, n=NULL, missing=1, epsilon=0.9))
bd.ms(phy=trees$phy, time=100, n=NULL, missing=1, epsilon=0.9)
geo=get(data(geospiza))
bd.ms(phy=geo$phy, missing=1, epsilon=0.9)
?geo=get
?geo=get(data(geospiza))
plot(bd.ms(phy=geo$phy, missing=1, epsilon=0.9))
for(x in 1:100) {
print(paste("coming out from loop where x = ", x))
break
}
?net diversification
?diversification
setwd('C:\\Users\\britt\\Evolution\\Tasks\\task_10')
library(phytools)
library(ape)
library(maps)
#Questions 1-3
trees <- vector(mode="list", length = 1)
births <- c()
Fractions <- c()
final <- c()
?pbtree
birhts[x] <- runif(1)
for(x in 1:100) {
birhts[x] <- runif(1)
Fractions[x] <- runif(1)
trees[[x]] <- pbtree(b=births[x], d=births[x]*Fractions[x], n=100)
}
for(x in 1:100) {
births[x] <- runif(1)
Fractions[x] <- runif(1)
trees[[x]] <- pbtree(b=births[x], d=births[x]*Fractions[x], n=100)
}
plot(trees[[x]])
#Question 4
tiplog <- log(sapply(trees, Ntip))
birthrate <- births
deathrate <- births * Fractions
netdiv <- birthrate - deathrate
plot(netdiv, tiplog, xlab="net diversification rate", ylab="tips")
abline(lm(tiplog ~ netdiv))
cor(netdiv, tiplog)
#There is a positive correlation of 0.2924643 between net diversification rate and log of total number of tips.
#Questions 5-6
final <- unlist(final)
plot(birthrate, final, xlab="speciation rate", ylab="average branch length")
abline(lm(final ~ birthrate))
cor(birthrate, final)
X <- c()
for(x in 1:100) {
births[x] <- runif(1)
Fractions[x] <- runif(1)
trees[[x]] <- pbtree(b=births[x], d=births[x]*Fractions[x], n=100)
}
#Question 4
tiplog <- log(sapply(trees, Ntip))
birthrate <- births
deathrate <- births * Fractions
netdiv <- birthrate - deathrate
plot(netdiv, tiplog, xlab="net diversification rate", ylab="tips")
abline(lm(tiplog ~ netdiv))
cor(netdiv, tiplog)
#There is a positive correlation of 0.2924643 between net diversification rate and log of total number of tips.
#Questions 5-6
final <- unlist(final)
plot(birthrate, final, xlab="speciation rate", ylab="average branch length")
#There is a positive correlation of 0.2924643 between net diversification rate and log of total number of tips.
#Questions 5-6
final <- unlist(X)
plot(birthrate, X, xlab="speciation rate", ylab="average branch length")
abline(lm(X ~ birthrate))
cor(birthrate, X)
abl <- c()
for(x in 1:100) {
births[x] <- runif(1)
Fractions[x] <- runif(1)
trees[[x]] <- pbtree(b=births[x], d=births[x]*Fractions[x], n=100)
}
plot(trees[[x]])
#Question 4
tiplog <- log(sapply(trees, Ntip))
birthrate <- births
deathrate <- births * Fractions
netdiv <- birthrate - deathrate
plot(netdiv, tiplog, xlab="net diversification rate", ylab="tips")
abline(lm(tiplog ~ netdiv))
cor(netdiv, tiplog)
#There is a positive correlation of 0.2924643 between net diversification rate and log of total number of tips.
#Questions 5-6
final <- unlist(abl)
plot(birthrate, abl, xlab="speciation rate", ylab="average branch length")
abline(lm(abl ~ birthrate))
cor(birthrate, abl)
orrelation
#Question 7
#Negative correlation
#Question 7
tips <- sapply(trees, Ntip)
which.max(tips)
largetree <- trees[[which.max(tips)]]
plot(largetree, type="radaial")
plot(largetree, type="radial")
rates <- c()
meantraits <- c()
vartraits <- c()
traits <- vector(mode="list", length=1)
traits[[x]] <- fastBM(tree = largetree, sig2=rates[x])
vartraits[[x]] <- var(traits[[i]])
for(x in 1:100) {
rates[x] <- runif(1)
traits[[x]] <- fastBM(tree = largetree, sig2=rates[x])
meantraits[[x]] <- mean(traits[[x]])
vartraits[[x]] <- var(traits[[i]])
}
for(x in 1:100) {
rates[x] <- runif(1)
traits[[x]] <- fastBM(tree = largetree, sig2=rates[x])
meantraits[[x]] <- mean(traits[[x]])
vartraits[[x]] <- var(traits[[x]])
}
#Question 8
meantraits <- unlist(meantraits)
plot(meantraits, rates, xlab = "mean of traits", ylab="rates")
abline(lm(rates ~ meantraits))
cor(meantraits, rates)
ation is 0.1749397
#Question 9
#The correlation is 0.1749397
#Question 9
vartraits <- unlist(meantraits())
#The correlation is 0.1749397
#Question 9
vartraits <- unlist(meantraits)
plot(vartraits, rates, xlab="variance of traits", ylab="rates")
cor(vartraits, rates)
cor(vartraits, rates)
abline(lm(rates ~ vartraits))
cor(vartraits, rates)
#The correlation is 0.1749397
#Question 9
vartraits <- unlist(meantraits)
plot(vartraits, rates, xlab="variance of traits", ylab="rates")
abline(lm(rates ~ vartraits))
cor(vartraits, rates)
#Correlation is 0.1749397
#Question 10
cor(traits[1], traits[[2]])
#Correlation is 0.1749397
#Question 10
cor(traits[[1]], traits[[2]])
#Correlation is 0.1592321
plot(traits[[1]], traits[[2]], xlab="first element of traits", ylab="second element of traits")
traitmat <- cbind(traits[[1]], traits[[2]])
traitmat
#ExtraCredit
?phylomorphospace
phylomorphospace(largetree, traitmat, xlab="first element of traits", ylab="second element of traits")
