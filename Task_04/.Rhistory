':'1,20
':'
1:20
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
'?'
?matrix
my_matrix2 <- matrix(1:20, 4,5,)
identical(my_matrix, My_matrix2)
identical(my_matrix, my_matrix2)
patients <- ("Bill", "Gina", "Kelly", "Sean")
patients <- ("Bill, Gina, Kelly, Sean")
info()
patients <- ("Bill, Gina, Kelly, Sean")
patients <- ("'Bill', 'Gina', 'Kelly', 'Sean'")
'?'
patients <- ("Bill,Gina,Kelly,Sean")
patients <- "Bill, Gina, Kelly, Sean"
patients <- matrix("Bill, Gina, Kelly, Sean", 0,1)
c("Bill, Gina, Kelly, Sean")
patients <- c("Bill, Gina, Kelly, Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class()
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data)
colnames(my_data) <- cnames
my_data
'=='
TRUE == TRUE
(FALSE == TRUE)
(FALSE == TRUE) == FLASE
(FALSE == TRUE) == FALSE
(6 == 7)
6 == 7
6 < 7
10 = 10
10 <= 10
5 != 7
5 = 7
5 != 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins,'twins')')
identical('twins,'twins')
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(>7)
which(ints >7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
sum(my_vector)
length(my_vector)
sum(my_vector)/length(my_vector)
submit()
submit()
submit()
sum(my_mean)
sum(my_vector)/length(my_vector)
submit()
?
'?'
function(sum(my_vector)/(length(my_vector)))
function(sum(my_vector)/(length(my_vector))
function()
my_mean <- sum(my_vector)/length(my_vector)
submit()
my_mean <- function(my_vector)
my_mean <- sum(my_vector)/length(my_vector)
submit()
sum(1,2,3,4)
length(2,4,6,8)
length(1,2,3)
length(1)
10/1
submit(10)
submit()
sum(my_vector)
length(my_vector)
submit()
submit(210/20)
210/20
submit(10.5)
submit()
my_vector
my_mean <_ sum(my_vector) / length(my_vector)
my_mean <- sum(my_vector) / length(my_vector)
my_mean <- sum(my_vector) / length(my_vector)
sum(my_vector) / length(my_vector)
my_mean <- 10.5
my_vector
submit
submit()
submit()
my_mean <- 10.5
my_mean <- sum(my_vector) / length(my_vector)
submit()
my_mean <- 10.5
submit(my_mean <- 10.5)
submit()
my_vector
sum(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))
length(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))
sum(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))/length(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))
submit()
sum(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))/length(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))
mean(my_vector_)
mean(my_vector)
my_mean <- sum(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))/length(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))
my_mean
submit()
sum()
length()
submit()
sum(my_vector)
length(my_vector)
my_mean <- 10.5
submit()
submit()
submit(my_mean)
submit
submit()
my_mean <- function(my_vector)
my_mean <- 10.5
submit()
my_mean <- sum(my_vector) / length(my_vector)
submit()
my_mean <- sum(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20) / length(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))
my_mean <- sum(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)) / length(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))
function
function(sum(my_vector))/(length(my_vector))
(sum(my_vector))/(length(my_vector))
my_mean <- 10.5
function(10.5)
my_mean(10.5)
my_mean
submit()
my_mean <- sum(my_vector) / length(my_vector)
sum(my_vector) <- 210
sum <- 210
s <- 210
l <- 20
my_mean <- s/l
s/l
submit()
my_mean
submit()
my_mean <- function(my_vector)
submit()
sum(my_vector)
sum(my_vector) / length(my_vector)
my_mean <- sum(my_vector) / length(my_vector)
submit()
my_mean <- mean(my_vector)
my_mean <- mean('my_vector')
my_mean <- mean("my_vector")
my_mean <- 10.5
submit()
my_mean <- function(my_vector) {
sum(my_vector) / length(my_vector)
}
submit()
submit()
info()
main()
boring_function
boring_function('My first function!')
boring_function <- function(x) {
x
}
main()
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder <- function(num, divisor = 5) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
num %% divisor
}
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4,div = 2)
args(remainder)
submit()
submit()
# Write your code here!
# Remember: the last expression evaluated will be returned!
funcdat
submit()
evaluate(std, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1},6)
evaluate(function)(x)c(8,4,0)
evaluate(function(x)c(8,4,0)
evaluatefunction(x)c(8,4,0)
evaluate(function(x){x+1},6)
evaluate(x)
evaluate(funcdat(x)
evaluate(x)(c(8,4,0))
info()
'?'
evaluate(x)
func(dat)(x)
evaluate(function(x){x[1]}, c(8,4,0)) [1]8
[1] 8
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[-1]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
paste("START", ... "STOP", sep= " ")
paste("START", ..., "STOP", sep= " ")
paste("START", ..., "STOP", sep= " ")
paste("START", ... =, "STOP", sep = "")
paste("telegram:"...)
paste("telegram:"START Good morning STOP""
paste("telegram":"START Good morning STOP"
}
submit()
paste("telegram":"START Good morning STOP")
submit()
submit()
telegram("My", "name", "is", "Brittany")
submit()
submit()
submit()
}
submit()
submit()
submit()
submit()
# Do your argument unpacking here!
args <- list("Beckley", "yellow", "house")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
house <- args [["noun""]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
house <- args [["noun""]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
paste("Beckley", "yellow", "house")
house <- args [["noun""]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
paste("Beckley", "yellow", "house")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
mad_libs(place = Beckley, adjective = yellow, noun = house)
mad_libs(place = "Beckley", adjective = "yellow", noun = "house")
paste(left, right, sep =)
submit()
"I" %p% "love" %p% "R!"
data(cars)
?(cars)
?cars
head()
head(cars)
plot(cars)
plot(help)
/plot
?plot
plot(speed)
plot(x=car$speed, y=cars$dist)
plot(x = car$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot()
plot(x= car$dist, y = cars$speed)
plot(x= cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$speed, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = "Speed", y = "Stopping Distance")
plot(xlab = "Speed", ylab = "Stopping Distance")
plot(x = "Speed", y = "Stopping Distance")
plot(x = xlab , y = ylab)
plot(x = "Speed", y = "Stopping Distance")
plot(x = Speed, y = Stopping Distance)
info()
?
plot(x = $Speed, y = $Stopping$Distance)
plot(x = Speed, y = Stopping$Distance)
plot(x = "Speed", y = "Stopping$Distance")
plot(x = cars$speed, y = cars$disance, xlab = Speed, ylab = Stopping Distance
plot(x = cars$speed, y = cars$disance, xlab = "Speed", ylab = "Stopping Distance"
plot(x = cars$speed, y = cars$disance, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
main("My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, main = "My Plot Subtitle")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
mtcars
data(mtcars)
?boxplot()
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
setwd('')
setwd("")
source("http://jonsmitchell.com/code/fxn05.R")
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h = 1, s = 0)
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0,1), type = "1", xlab="generation", ylab="allele freq", lwd =2)
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0,1), xlab="generation", ylab="allele freq", lwd =2)
lines(1:nrow(Pop1), Pop1[,2], lwd =2, col='red')
legend("topleft", legend = c("a", "b"), col = c("black", "red"), lwd = 2, bty="n")
plotFit( nruns = 10, n = 50, ngens = 100, init_p = 0.5, h = 1, s = 0)
plotFit( nruns = 10, n = 50, ngens = 100, init_p = 0.5, h = 1, s = 0)
Expectation <- c(10, 10, 10, 10)
Observed <- c(15, 15, 5, 5)
Chisq <- sum( ( ( Expectation - Observed ) ^ 2 ) / Expectation )
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "=" ~. (Chisq)), legend.text=c("expected", "observed"))
Observed <- c(5, 0, 0, 35)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "=" ~. (Chisq)), legend.text=c("expected", "observed"))
Observed <- c(2, 3, 10, 30)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "=" ~. (Chisq)), legend.text=c("expected", "observed"))
Observed <- c(10, 10, 10, 10)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "=" ~. (Chisq)), legend.text=c("expected", "observed"))
expected bars are the same.
#X^2 shows up as 10 for all circumstances used for the observed values.
setwd('C:\\Users\\britt\\Evolution\\Tasks\\Task_04')
results <- read.csv("http://jonsmitchell.com/data/biol112labresults.csv", stringsAsFactors=F)
counts <- results[,c("yellow", "red", "green", "blue", "black", "tan")]
backgrounds <- c("White", "Red", "Yellow", "Green", "Blue", "Black")
backgroundCol <- c("white", "#d53e4f", "#fee08b", "#abdda4", "#3288bd", "black")
calcChi(counts[1,])
Chisqs <- apply(counts, 1, calcChi)
plotChis(counts)
plotChis(counts)
plotChis(counts)
plotChis(counts)
plotChis(counts)
qaured gets higher, there are fewer bars that show greater numerical value. When it is 300, there is only
#one bar that is not 0. When it is 40.8, the bars all have numerical value but are very uneven. The lower the chi-squared, the more
#even the bars are.
#As the value of chi-sqaured gets higher, there are fewer bars that show greater numerical value. When it is 300, there is only
#one bar that is not 0. When it is 40.8, the bars all have numerical value but are very uneven. The lower the chi-squared, the more
#even the bars are. plotChis() shows many different possibilities that can occur because the range is 1 to n.
Avg <- mean(Chisqs)
Avg
#The average here is much greater than the critical value. Here is the average is 60.99081 and the critical value from the packet is 11.70.
backgroundAvgs <- tapply(Chisqs, results[,3] mean)
#The average here is much greater than the critical value. Here is the average is 60.99081 and the critical value from the packet is 11.70.
backgroundAvgs <- tapply(Chisqs, results[,3], mean)
propSig <- length( which( Chisqs > 11.70) ) / length(Chisqs)
percSig <- round(100 * propSig)
propSig
percSig
s seem surprising to me. I do not think that is all due to natural selection. There could be error or
#too small of a sampling size.
#Having 92 significant trials does seem surprising to me. I do not think that is all due to natural selection. There could be error or
#too small of a sampling size.
par(las = 1, mar = c(4, 4, 1, 1), mgp = c(2, 0.5, 0), tck = -0.01, cex. axis=1)
#Having 92 significant trials does seem surprising to me. I do not think that is all due to natural selection. There could be error or
#too small of a sampling size.
par(las = 1, mar = c(4, 4, 1, 1), mgp = c(2, 0.5, 0), tck = -0.01, cex.)
#Having 92 significant trials does seem surprising to me. I do not think that is all due to natural selection. There could be error or
#too small of a sampling size.
par(las = 1, mar = c(4, 4, 1, 1), mgp = c(2, 0.5, 0), tck = -0.01, axis=1)
#Having 92 significant trials does seem surprising to me. I do not think that is all due to natural selection. There could be error or
#too small of a sampling size.
par(las = 1, mar = c(4, 4, 1, 1), mgp = c(2, 0.5, 0), tck = -0.01, cex. axis=1)
#Having 92 significant trials does seem surprising to me. I do not think that is all due to natural selection. There could be error or
#too small of a sampling size.
par(las = 1, mar = c(4, 4, 1, 1), mgp = c(2, 0.5, 0), tck = -0.01, axis=1)
#Having 92 significant trials does seem surprising to me. I do not think that is all due to natural selection. There could be error or
#too small of a sampling size.
par(las = 1, mar = c(4, 4, 1, 1), mgp = c(2, 0.5, 0), tck = -0.01, cex. axis=1)
#Having 92 significant trials does seem surprising to me. I do not think that is all due to natural selection. There could be error or
#too small of a sampling size.
par(las = 1, mar = c(4, 4, 1, 1), mgp = c(2, 0.5, 0), tck = -0.01, cex.axis=1)
hist(Chisqs, main="", xlab="chi-squared values", ylab="frequency")
par(las = 1, mar = c(4, 4, 1, 1), mgp =c(2, 0.5, 0), tck = -0.01, cex.axis=1)
plot(1, 1, xlim=c(0, 400), ylim=c(1, 8.5), xlab="", ylab="", type="n", yaxt="n")
axis(2, at = 1:length(backgrounds), labels = backgrounds)
mtext(side=1, expression(chi^2), cex=1.75, line=2.5)
counter <- 1
for (i in backgrounds) {}
Data <- Chisqs[which(results[,3] == i)]
addHist(Y=counter, Dat=Data, Color=backgroundCol[counter])
counter <- counter + 1
for (i in backgrounds) {
Data <- Chisqs[which(results[,3] == i)]
addHist(Y=counter, Dat=Data, Color=backgroundCol[counter])
counter <- counter + 1
}
abline( v = 11.70, lty=2, lwd = 2, col='black')
#Some backgrounds have more to show on the right of the line but I am not sure what it is signifying or how to read it.
Simulation <- simDraws(10000)
addHist(Y=7, Dat=Simulation, Color="lightgray")
mtext(side=2, at=7, line=0, "simulated")
abline(v = 11.70, lty=2, lwd=2)
Fit <- c(1, 1, 1, 1, 1, 1))
Fit <- c(1, 1, 1, 1, 1, 1)
names(Fit) <- 1:6
Simulation2 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation2, Color=rgb(0,0,0,0.25))
Fit <- c(0.1, 1, 1, 1, 1, 1)
names(Fit) <- 1:6
Simulation3 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation3, Color=rgb(0,0,0,0.25))
Fit <- c(0.5, 0.6, 0.7, 1, 1, 1)
names(Fit) <- 1:6
Simulation4 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation4, Color=rgb(0,0,0,0.25))
Fit <- c(0.1, 0.2, 0.3 0.4, 0.5, 1)
Fit <- c(0.1, 0.2, 0.3, 0.4, 0.5, 1)
names(Fit) <- 1:6
Simulation5 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation5, Color=rgb(0,0,0,0.25))
Fit <- c(0.1, 0.1, 0.1, 0.1, 0.1, 1)
names(Fit) <- 1:6
Simulation6 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation6, Color=rgb(0,0,0,0.25))
mtext(side=2, at=8, line=0, "sel. sim.")
Simulation7 <- c(Simulation2, Simulation3, Simulation4, Simulation5, Simulation6)
Simulation7
Simulation7 <- c(Simulation2, Simulation3, Simulation4, Simulation5, Simulation6)
addHist(Y=8, Dat=Simulation7, Color=rgb(0,0,1,0.25))
addHist(Y=8, Dat=Simulation7, Color=rgb(0,0,1,0.25))
simPop(Popsize=100, nGenerations=100, h=1, s=0, initial_p=0.5, mu = 0, twoway = TRUE, w = NULL)
simDraws
function(nruns, ncols=6, nstart=10, nrounds=3, w=NULL)	{
Chiout <- c()
for (j in 1:nruns)	{
Start <- rep(1:ncols, nstart)
Pop <- Start
for (i in 1:nrounds)	{
if (is.null(w))	{
Draws <- sample(Pop, 20, replace = F)
}
else if (!is.null(w))	{
if (length(setdiff(unique(Pop), names(w))) == 0)	{
Draws <- sample(Pop, 20, replace=F, prob=w[Pop])
}
else if (length(setdiff(unique(Pop), names(w))) != 0)	{
cat("Not enough fitness values! ", setdiff(unique(Pop), names(w)))
}
}
Pop <- sort(c(Draws,Draws,Draws))
}
Summary <- c()
for (k in 1:ncols)	{
Summary[k] <- length(which(Pop == k))
}
Chiout[j] <- sum(((Summary - nstart)^2) / nstart)
}
return(Chiout)
}
